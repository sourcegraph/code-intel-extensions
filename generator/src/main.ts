import * as shell from 'shelljs'
import * as _ from 'lodash'

// The set of languages come from https://madnight.github.io/githut/#/pull_requests/2018/4
// The language names come from https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers
// The extensions come from shared/src/languages.ts
const languages: { [name: string]: { extensions: string[]; stylized: string } } = {
    java: { extensions: ['java'], stylized: 'Java' },
    cpp: { extensions: ['c', 'cc', 'cpp', 'c++', 'h++', 'hh', 'h'], stylized: 'C++' },
    ruby: {
        extensions: [
            'rb',
            'builder',
            'eye',
            'fcgi',
            'gemspec',
            'god',
            'jbuilder',
            'mspec',
            'pluginspec',
            'podspec',
            'rabl',
            'rake',
            'rbuild',
            'rbw',
            'rbx',
            'ru',
            'ruby',
            'spec',
            'thor',
            'watchr',
        ],
        stylized: 'Ruby',
    },
    php: {
        extensions: ['php', 'phtml', 'php3', 'php4', 'php5', 'php6', 'php7', 'phps'],
        stylized: 'PHP',
    },
    csharp: { extensions: ['cs', 'csx'], stylized: 'C#' },
    shell: { extensions: ['sh', 'bash', 'zsh'], stylized: 'Shell' },
    scala: { extensions: ['sbt', 'sc', 'scala'], stylized: 'Scala' },
    swift: { extensions: ['swift'], stylized: 'Swift' },
    rust: { extensions: ['rs', 'rs.in'], stylized: 'Rust' },
    kotlin: { extensions: ['kt', 'ktm', 'kts'], stylized: 'Kotlin' },
    elixir: { extensions: ['ex', 'exs'], stylized: 'Elixir' },
    perl: {
        extensions: ['pl', 'al', 'cgi', 'fcgi', 'perl', 'ph', 'plx', 'pm', 'pod', 'psgi', 't'],
        stylized: 'Perl',
    },
    lua: { extensions: ['lua', 'fcgi', 'nse', 'pd_lua', 'rbxs', 'wlua'], stylized: 'Lua' },
    clojure: { extensions: ['clj', 'cljs', 'cljx'], stylized: 'Clojure' },
    haskell: { extensions: ['hs', 'hsc'], stylized: 'Haskell' },
    powershell: { extensions: ['ps1', 'psd1', 'psm1'], stylized: 'PowerShell' },
    lisp: {
        extensions: ['lisp', 'asd', 'cl', 'lsp', 'l', 'ny', 'podsl', 'sexp', 'el'],
        stylized: 'Lisp',
    },
    erlang: { extensions: ['erl'], stylized: 'Erlang' },
    dart: { extensions: ['dart'], stylized: 'Dart' },
    ocaml: {
        extensions: ['ml', 'eliom', 'eliomi', 'ml4', 'mli', 'mll', 'mly', 're'],
        stylized: 'OCaml',
    },
    r: { extensions: ['r', 'rd', 'rsx'], stylized: 'R' },
}

function langID(name: string): string {
    const toID = {
        csharp: 'cs',
    }
    return name in toID ? toID[name] : name
}

function quote(value: string): string {
    return `'${value}'`
}

function jsStringify(values: string[]): string {
    return `[${values.map(quote).join(', ')}]`
}

function main(): void {
    shell.set('-e')
    _.forEach(languages, ({ extensions, stylized }, name) => {
        console.log('Updating', name)

        // The following git gymnastics update the first autogenerated commit in
        // the corresponding repository while preserving all commits after it.

        shell.set('+e')
        console.log(`Adding git remote ${name} (if it already exists, you can ignore the error)`)
        shell.exec(`git remote add ${name} git@github.com:sourcegraph/sourcegraph-${name}.git`)
        shell.set('-e')

        shell.exec(`git fetch ${name}`)

        shell.set('+e')
        console.log(`Removing branch master-${name} (if it does not exist, you can ignore the error)`)
        shell.exec(`git branch -D master-${name}`)
        shell.set('-e')

        shell.exec(`git checkout --orphan master-${name}`)
        shell.exec(`git reset .`)

        shell.sed('-i', /\$LANGNAME\b/, name, 'package.json')
        shell.sed('-i', /\$LANGID\b/, langID(name), 'package.json')
        shell.sed('-i', /\$LANG\b/, stylized, 'package.json')
        shell.sed('-i', /\$LANGNAME\b/, name, 'README.md')
        shell.sed('-i', /\$LANG\b/, stylized, 'README.md')
        shell.sed('-i', / \(template\)/, '', 'README.md')
        shell.sed('-i', /\[\] \/\/ AUTOGENERATE::EXTS/, jsStringify(extensions), 'src/handler.ts')

        shell.exec(
            'git add .editorconfig .gitignore .prettierignore .prettierrc LICENSE README.md mocha.opts package.json src tsconfig.json yarn.lock'
        )
        shell.exec('git clean -fd')
        shell.exec(`git commit -m "Autogenerate the ${name} language extension"`)
        shell.exec(`git rebase --onto master-${name} $(git rev-list --max-parents=0 ${name}/master) ${name}/master`)
        shell.exec(`git branch -f master-${name} HEAD`)
        shell.exec(`git push --force ${name} master-${name}:master`)
        shell.exec('src -config=$HOME/src-config.prod.json extension publish')

        shell.exec('git checkout generator')
    })
}

main()
